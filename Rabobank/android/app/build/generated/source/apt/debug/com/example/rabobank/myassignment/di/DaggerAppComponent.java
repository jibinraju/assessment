// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.rabobank.myassignment.di;

import android.app.Activity;
import android.app.Application;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import com.example.rabobank.myassignment.RaboBankAssignmentApp;
import com.example.rabobank.myassignment.data.CSVFile;
import com.example.rabobank.myassignment.data.CvsServices;
import com.example.rabobank.myassignment.data.CvsServices_Factory;
import com.example.rabobank.myassignment.data.CvsServices_MembersInjector;
import com.example.rabobank.myassignment.ui.ItemArrayAdapter;
import com.example.rabobank.myassignment.ui.MainActivity;
import com.example.rabobank.myassignment.ui.MainActivityModule_GetArrayAdapterFactory;
import com.example.rabobank.myassignment.ui.MainActivityModule_GetCvsInputStreamFactory;
import com.example.rabobank.myassignment.ui.MainActivityModule_ProvideMainPresenterFactory;
import com.example.rabobank.myassignment.ui.MainActivity_MembersInjector;
import com.example.rabobank.myassignment.ui.MainObservable;
import com.example.rabobank.myassignment.ui.MainObservable_Factory;
import com.example.rabobank.myassignment.ui.MainObservable_MembersInjector;
import com.example.rabobank.myassignment.ui.MainPresenter;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.Preconditions;
import java.io.InputStream;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_BindActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Application application;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.application = builder.application;
  }

  @Override
  public void inject(RaboBankAssignmentApp app) {
    injectRaboBankAssignmentApp(app);
  }

  @Override
  public void inject(DaggerApplication instance) {
    injectDaggerApplication(instance);
  }

  private RaboBankAssignmentApp injectRaboBankAssignmentApp(RaboBankAssignmentApp instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    return instance;
  }

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public AppComponent build() {
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilder_BindActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityBuilder_BindActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilder_BindActivity.MainActivitySubcomponent {
    private MainActivity seedInstance;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private DispatchingAndroidInjector<android.support.v4.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          Collections
              .<Class<? extends android.support.v4.app.Fragment>,
                  Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
                  emptyMap());
    }

    private InputStream getInputStream() {
      return Preconditions.checkNotNull(
          MainActivityModule_GetCvsInputStreamFactory.proxyGetCvsInputStream(
              DaggerAppComponent.this.application),
          "Cannot return null from a non-@Nullable @Provides method");
    }

    private CSVFile getCSVFile() {
      return new CSVFile(getInputStream());
    }

    private MainObservable getMainObservable() {
      return injectMainObservable(MainObservable_Factory.newMainObservable());
    }

    private CvsServices getCvsServices() {
      return injectCvsServices(CvsServices_Factory.newCvsServices());
    }

    private MainPresenter getMainPresenter() {
      return Preconditions.checkNotNull(
          MainActivityModule_ProvideMainPresenterFactory.proxyProvideMainPresenter(
              seedInstance, getCvsServices()),
          "Cannot return null from a non-@Nullable @Provides method");
    }

    private ItemArrayAdapter getItemArrayAdapter() {
      return Preconditions.checkNotNull(
          MainActivityModule_GetArrayAdapterFactory.proxyGetArrayAdapter(
              DaggerAppComponent.this.application),
          "Cannot return null from a non-@Nullable @Provides method");
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainObservable injectMainObservable(MainObservable instance) {
      MainObservable_MembersInjector.injectCsvFile(instance, getCSVFile());
      return instance;
    }

    private CvsServices injectCvsServices(CvsServices instance) {
      CvsServices_MembersInjector.injectMainObservable(instance, getMainObservable());
      return instance;
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      MainActivity_MembersInjector.injectMainPresenter(instance, getMainPresenter());
      MainActivity_MembersInjector.injectItemArrayAdapter(instance, getItemArrayAdapter());
      return instance;
    }
  }
}
